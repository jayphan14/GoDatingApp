// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: match.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMatch = `-- name: CreateMatch :one
INSERT INTO matches (
  user1id, user2id
) VALUES (
  $1, $2
)
RETURNING id, user1id, user2id, created_at
`

type CreateMatchParams struct {
	User1id pgtype.UUID `json:"user1id"`
	User2id pgtype.UUID `json:"user2id"`
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) (Match, error) {
	row := q.db.QueryRow(ctx, createMatch, arg.User1id, arg.User2id)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.User1id,
		&i.User2id,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMatch = `-- name: DeleteMatch :exec
DELETE FROM matches
WHERE (user1id = $1 AND user2id = $2) OR (user1id = $2 AND user2id = $1)
`

type DeleteMatchParams struct {
	User1id pgtype.UUID `json:"user1id"`
	User2id pgtype.UUID `json:"user2id"`
}

func (q *Queries) DeleteMatch(ctx context.Context, arg DeleteMatchParams) error {
	_, err := q.db.Exec(ctx, deleteMatch, arg.User1id, arg.User2id)
	return err
}

const getMatchByMatchID = `-- name: GetMatchByMatchID :one
SELECT id, user1id, user2id, created_at FROM matches
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMatchByMatchID(ctx context.Context, id pgtype.UUID) (Match, error) {
	row := q.db.QueryRow(ctx, getMatchByMatchID, id)
	var i Match
	err := row.Scan(
		&i.ID,
		&i.User1id,
		&i.User2id,
		&i.CreatedAt,
	)
	return i, err
}

const getMatchByUserId = `-- name: GetMatchByUserId :many
SELECT id, user1id, user2id, created_at FROM matches
WHERE (user1id = $1 AND user2id = $2) OR (user1id = $2 AND user2id = $1)
`

type GetMatchByUserIdParams struct {
	User1id pgtype.UUID `json:"user1id"`
	User2id pgtype.UUID `json:"user2id"`
}

func (q *Queries) GetMatchByUserId(ctx context.Context, arg GetMatchByUserIdParams) ([]Match, error) {
	rows, err := q.db.Query(ctx, getMatchByUserId, arg.User1id, arg.User2id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Match
	for rows.Next() {
		var i Match
		if err := rows.Scan(
			&i.ID,
			&i.User1id,
			&i.User2id,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMatches = `-- name: ListMatches :many
SELECT id, user1id, user2id, created_at FROM matches
WHERE user1id = $1 OR user2id = $2
`

type ListMatchesParams struct {
	User1id pgtype.UUID `json:"user1id"`
	User2id pgtype.UUID `json:"user2id"`
}

func (q *Queries) ListMatches(ctx context.Context, arg ListMatchesParams) ([]Match, error) {
	rows, err := q.db.Query(ctx, listMatches, arg.User1id, arg.User2id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Match
	for rows.Next() {
		var i Match
		if err := rows.Scan(
			&i.ID,
			&i.User1id,
			&i.User2id,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
