// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, email, password, gender, university, picture, bio, bio_pictures 
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, username, email, password, gender, university, picture, bio, bio_pictures, created_at
`

type CreateUserParams struct {
	Username    string   `json:"username"`
	Email       string   `json:"email"`
	Password    string   `json:"password"`
	Gender      string   `json:"gender"`
	University  string   `json:"university"`
	Picture     []byte   `json:"picture"`
	Bio         string   `json:"bio"`
	BioPictures []string `json:"bio_pictures"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Gender,
		arg.University,
		arg.Picture,
		arg.Bio,
		arg.BioPictures,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Gender,
		&i.University,
		&i.Picture,
		&i.Bio,
		&i.BioPictures,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password, gender, university, picture, bio, bio_pictures, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Gender,
		&i.University,
		&i.Picture,
		&i.Bio,
		&i.BioPictures,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, gender, university, picture, bio, bio_pictures, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Gender,
		&i.University,
		&i.Picture,
		&i.Bio,
		&i.BioPictures,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password, gender, university, picture, bio, bio_pictures, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Gender,
			&i.University,
			&i.Picture,
			&i.Bio,
			&i.BioPictures,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
set username = $2,
 email = $3, 
 password = $4, 
 gender = $5, 
 university = $6, 
 picture = $7, 
 bio = $8, 
 bio_pictures = $9  

WHERE id = $1
RETURNING id, username, email, password, gender, university, picture, bio, bio_pictures, created_at
`

type UpdateUserParams struct {
	ID          pgtype.UUID `json:"id"`
	Username    string      `json:"username"`
	Email       string      `json:"email"`
	Password    string      `json:"password"`
	Gender      string      `json:"gender"`
	University  string      `json:"university"`
	Picture     []byte      `json:"picture"`
	Bio         string      `json:"bio"`
	BioPictures []string    `json:"bio_pictures"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Gender,
		arg.University,
		arg.Picture,
		arg.Bio,
		arg.BioPictures,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Gender,
		&i.University,
		&i.Picture,
		&i.Bio,
		&i.BioPictures,
		&i.CreatedAt,
	)
	return i, err
}
